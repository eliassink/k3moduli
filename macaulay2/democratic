dismiss "Elimination" --avoid shadowing warning
loadPackage "MultiprojectiveVarieties"

--Throughout, P denotes a 3 x n matrix, representing a (family of) arrangements of n points in PP^2
--i's denotes a subset of {0,...,n-1}.

--ideal representing the condition that the points indexed by i's all coincide
pointsCollide = (P,i's) -> sum (for p in drop(i's,1) list minors (2,submatrix(P,{first i's, p})))

--any k points collide
anyPointsCollide = (P,k) -> intersect (for i's in subsets(numcols P,k) list pointsCollide(P,i's))

--points indexed by i's are collinear
collinear = (P,i's) -> minors (3,submatrix (P,i's))

--any k points collinear
anyCollinear = (P,k) -> intersect (for i's in subsets(numcols P,k) list collinear(P,i's))

--complement of the stable locus (NOT of the semistable locus, which is different when 3|n)
unstableLocus = P -> (
	k := (numcols P - 1) // 3 + 1;
	m :=  (2 * numcols P - 1) // 3 + 1;
	intersect(anyPointsCollide (P,k), anyCollinear(P,m))
)

--For L a list of subsets of {0,...,n}, returns the ideal that those subsets of points are collinear
--When P is a projectiveFrame, this is the ideal of the variety X_i
linesIdeal = (P,L) -> sum apply(L,l->collinear(P,l))

--returns a 3 x n matrix with coefficients in the coordinate ring of (PP^2)^(n-4)
--the columns in i's are fixed to standard coordinates, others are coordinate variables
projectiveFrame = {Field => ZZ/65357} >> o -> (n,i's) -> (
	R := ring projectiveVariety(toList((n-4):2),o.Field); 		--(PP^2)^(n-4)
        standard := {{1,0,0},{0,1,0},{0,0,1},{1,1,1}};			
        matrix table(3,n,(j,i) ->
                if any(i's,k->k==i)
                then standard#(position(i's,k->k==i))#j
                else R_(3*(i-number(i's,k->k<i))+j)
        )
)

--Returns a list of 3 x n matrices, each representing the restriction of
--projectiveFrame(n,i's) to a standard affine chart of (PP^2)^(n-4)
affineCharts = {Field => ZZ/65357} >> o -> (n,i's) -> (
	P := projectiveFrame(n,i's,Field=>o.Field);
	R := ring P;
	A := o.Field[a_0..a_(2*(n-4)-1)];
	
	affineChart = chart -> (
		k := 0;
		sub(P,for i from 0 to 3*(n-4)-1 list 
			(R_i => if (i%3) == chart#(i//3) then 1 else (k = k+1; A_(k-1))))
	);
	for chart in (n-4:0)..(n-4:2) list affineChart(chart)
)

--when P is one of the matrices returned by affineCharts and L is a list of subsets of {0,...,n},
--returns true if the singular locus of the corresponding affine chart of X_i is smooth
stableIsSmooth = (P,L) -> (
	I := linesIdeal(P,L);
	1 % I == 0 or (
		S := singularLocus linesIdeal(P,L); --singular locus of X_i
		uns:= unstableLocus(sub(P,S));      --unstable locus of X_i
		uns == 0 or isSubset(uns,radical ideal 0_S)  --singular locus contained in unstable locus
	)
)

--Checks that all X_i's are either empty or irreducible.
--Verbose => true prints each frame with the number of components
allIrreducible = {Field=>ZZ/65357,Verbose=>false} >> o -> L -> (
	n := #unique(flatten L);
	all (subsets(n,4), i's->(
		if o.Verbose then print i's;
		X := projectiveVariety linesIdeal (projectiveFrame(n,i's,Field=>o.Field),L);
		comps = #decompose X;
		if o.Verbose then print comps;
		comps <= 1
		)
	)
)

--Checks that stableIsSmooth returns true for every affine chart of the frame i's
frameSmooth = {Field=>ZZ/65357} >> o -> (L,i's) -> (
	n := #unique(flatten L);
	sm := all(affineCharts(n,i's,Field=>o.Field),P->stableIsSmooth(P,L))
)

--Checks that frameSmooth returns true for all frames.
--Becaues of Macaulay2 hashes mutable objects by incrementing a counter, creating too many rings
--overflows that counter. To prevent this, we create a new Macaulay2 process for each frame,
--which resets the counter. The result for that frame is passed back to the parent process
--via exit code. (This is undoubtably a bit of a hack.)
allSmooth = {Pause=>false} >> o -> (L) -> (
	M2exec := commandLine#0; --name of M2 executable
	allFrames := subsets(#unique flatten L1,4);
	all(for frameNumber from 0 to #allFrames-1 list(
		i's := allFrames#frameNumber;
		print("\n\nFrame " | frameNumber | "/" | #allFrames | ":" | toString(i's) | "\n\n");

		--the command to run in the child process:
		--load "democratic"; if frameSmooth(L1,i's) then (print true; exit 0) else (print false; exit 1)
		command := "load \"democratic\"; if frameSmooth(" | toString(L1) | "," | toString(i's) | 
			") then (print true; exit 0;) else (print false;exit 1)";

		sm := run(M2exec | " -e '" | command | "'"); --run the computation in the child process, keep the exit code
		if o.Pause then (print("Next frame begins in 3 seconds");sleep(3);); --pause between frames to allow interrupt
		if sm == 0 then true else false
	),identity)
)

L1 = {{1,2,4},{1,3,8},{1,7,9},{2,3,7},{2,5,9},{3,5,0},{4,5,6},{4,8,0},{6,7,8},{6,9,0}}

--allIrreducible(L1);
--allSmooth(L1);
